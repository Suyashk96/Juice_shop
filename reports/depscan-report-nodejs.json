{"id": "CVE-2015-9235", "package": "npm:jsonwebtoken", "package_usage": "required", "version": "<4.2.2", "fix_version": "4.2.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Verification Bypass\nVersions 4.2.1 and earlier of `jsonwebtoken` are affected by a verification bypass vulnerability. This is a result of weak validation of the JWT algorithm type, occuring when an attacker is allowed to arbitrarily specify the JWT algorithm.\n\n\nUpdate to version 4.2.2 or later.\n            ", "related_urls": []}
{"id": "CVE-2016-1000223", "package": "npm:jws", "package_usage": "required", "version": "<3.0.0", "fix_version": "3.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Forgeable Public/Private Tokens\nAffected versions of the `jws` package allow users to select what algorithm the server will use to verify a provided JWT. A malicious actor can use this behaviour to arbitrarily modify the contents of a JWT while still passing verification. For the common use case of the JWT as a bearer token, the end result is a complete authentication bypass with minimal effort.\n\n\nUpdate to version 3.0.0 or later.\n            ", "related_urls": ["https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/", "https://github.com/brianloveswords/node-jws/commit/585d0e1e97b6747c10cf5b7689ccc5618a89b299#diff-4ac32a78649ca5bdd8e0ba38b7006a1e"]}
{"id": "CVE-2016-1000237", "package": "npm:sanitize-html", "package_usage": "required", "version": "<=1.4.2", "fix_version": "1.4.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Cross Site Scripting\nAffected versions of `sanitize html` do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript.\nUpdate to version 1.4.3 or later.\n            ", "related_urls": ["https://github.com/punkave/sanitize-html/issues/29"]}
{"id": "CVE-2017-16016", "package": "npm:sanitize-html", "package_usage": "required", "version": "<=1.11.1", "fix_version": "1.11.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Cross Site Scripting\nAffected versions of `sanitize html` are vulnerable to cross site scripting when allowedTags includes at least one `nonTextTag`.\n\n## Proof of Concept\n\n```\nvar sanitizeHtml = require('sanitize html');\n\nvar dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';\nvar clean = sanitizeHtml(dirty, {\n    allowedTags: [ 'textarea'  \n});\n\nconsole.log(clean);\n\n// !<textarea></textarea><svg/onload=prompt`xs`></textarea>!\n```\nUpdate to version 1.11.4 or later.\n            ", "related_urls": ["https://github.com/punkave/sanitize-html/issues/100", "https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403", "https://npmjs.com/package/sanitize-html#discarding-the-entire-contents-of-a-disallowed-tag"]}
{"id": "CVE-2018-3721", "package": "npm:lodash", "package_usage": "optional", "version": "<4.17.5", "fix_version": "4.17.5", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution\nVersions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\nUpdate to version 4.17.5 or later.\n            ", "related_urls": ["https://hackerone.com/reports/310443"]}
{"id": "NPM-658", "package": "npm:base64url", "package_usage": "optional", "version": "<3.0.0", "fix_version": "3.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read\nVersions of `base64url` before 3.0.0 are vulnerable to to out of bounds reads as it allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.\nUpdate to version 3.0.0 or later.\n            ", "related_urls": ["https://hackerone.com/reports/321687", "https://github.com/brianloveswords/base64url/pull/25\""]}
{"id": "CVE-2018-16487", "package": "npm:lodash", "package_usage": "optional", "version": "<4.17.11", "fix_version": "4.17.11", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution\nVersions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\nUpdate to version 4.17.11 or later.\n            ", "related_urls": ["https://hackerone.com/reports/380873"]}
{"id": "CVE-2019-10744", "package": "npm:lodash", "package_usage": "optional", "version": "<4.17.12", "fix_version": "4.17.12", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution\nVersions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\nUpdate to version 4.17.12 or later.\n            ", "related_urls": ["https://snyk.io/vuln/SNYK-JS-LODASH-450202"]}
{"id": "NPM-1122", "package": "npm:marsdb", "package_usage": "required", "version": ">=0.0.0", "fix_version": "", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Command Injection\nAll versions of `marsdb` are vulnerable to Command Injection. In the `DocumentMatcher` class, selectors on `$where` clauses are passed to a Function constructor unsanitized. This allows attackers to run arbitrary commands in the system when the function is executed.\nNo fix is currently available. Consider using an alternative package until a fix is made available.\n            ", "related_urls": ["https://github.com/bkimminich/juice-shop/issues/1173"]}
{"id": "CVE-2020-15168", "package": "npm:node-fetch", "package_usage": "optional", "version": "<2.6.1", "fix_version": "2.6.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Denial of Service\nNode Fetch did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n\nFor most people, this fix will have a little or no impact. However, if you are relying on node fetch to gate files above a size, the impact could be significant, for example: If you don't double check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.\nUpgrade to version 2.6.1 or 3.0.0 beta.9\n            ", "related_urls": []}
